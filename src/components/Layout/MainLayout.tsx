import React, { useState, useRef, useEffect } from 'react';
import OpenAI from 'openai';
import { useChatMessages, useAddMessage, useClearChatHistory } from '../../hooks/useChat';
interface Message {
  id: string;
  text: string;
  sender: 'user' | 'ai' | 'contact';
  timestamp: Date;
}

interface MainLayoutProps {
  selectedChatId: string | null;
  onChatSelect: (chatId: string) => void;
}

export default function MainLayout({
  selectedChatId,
  onChatSelect,
}: MainLayoutProps) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º TanStack Query —Ö—É–∫–∏
  const { data: messages = {}, isLoading: messagesLoading } = useChatMessages();
  const addMessageMutation = useAddMessage();
  const clearHistoryMutation = useClearChatHistory();

  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
  const openai = new OpenAI({
    apiKey: import.meta.env.VITE_OPENAI_API_KEY,
    dangerouslyAllowBrowser: true,
  });

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const clearChatHistory = () => {
    const confirmClear = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤?');
    if (confirmClear) {
      clearHistoryMutation.mutate();
    }
  };

  const callAI = async (message: string): Promise<string> => {
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "user",
            content: message
          }
        ],
        max_tokens: 1000,
        temperature: 0.7,
      });

      return completion.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç.';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API:', error);
      if (error instanceof Error) {
        throw new Error(`OpenAI API Error: ${error.message}`);
      }
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const sendMessage = async () => {
    if (!inputText.trim() || !selectedChatId) return;

    const messageText = inputText;
    
    const newMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      sender: 'user',
      timestamp: new Date(),
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º—É—Ç–∞—Ü–∏—é
    addMessageMutation.mutate({ chatId: selectedChatId, message: newMessage });
    setInputText('');

    // –ï—Å–ª–∏ —ç—Ç–æ AI —á–∞—Ç, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    if (selectedChatId === 'ai-assistant') {
      setIsLoading(true);
      try {
        const aiResponse = await callAI(messageText);
        const aiMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: aiResponse,
          sender: 'ai',
          timestamp: new Date(),
        };

        addMessageMutation.mutate({ chatId: selectedChatId, message: aiMessage });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API:', error);
        const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.',
          sender: 'ai',
          timestamp: new Date(),
        };

        addMessageMutation.mutate({ chatId: selectedChatId, message: errorMessage });
      } finally {
        setIsLoading(false);
      }
    } else if (selectedChatId === 'john-doe') {
      setIsLoading(true);
      try {
        const johnPrompt = `–¢—ã –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –ø–æ –∏–º–µ–Ω–∏ John Doe. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"`;
        const johnResponse = await callAI(johnPrompt);
        const johnMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: johnResponse,
          sender: 'contact',
          timestamp: new Date(),
        };

        addMessageMutation.mutate({ chatId: selectedChatId, message: johnMessage });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç John:', error);
        const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üòÖ',
          sender: 'contact',
          timestamp: new Date(),
        };

        addMessageMutation.mutate({ chatId: selectedChatId, message: errorMessage });
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  if (messagesLoading) {
    return (
      <div className="flex h-screen bg-gray-100 dark:bg-gray-900 items-center justify-center">
        <div className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-gray-100 dark:bg-gray-900">
      {/* Sidebar */}
      <div className="w-80 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700">
        <div className="p-4">
          <div className="flex justify-between items-center mb-4">
            <h1 className="text-xl font-bold text-gray-900 dark:text-white">ChatFront</h1>
            <button
              onClick={clearChatHistory}
              className="text-xs px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
              title="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
              disabled={clearHistoryMutation.isPending}
            >
              {clearHistoryMutation.isPending ? '‚è≥' : 'üóëÔ∏è'}
            </button>
          </div>
          
          {/* AI Assistant */}
          <div 
            className={`p-3 mb-2 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer rounded-lg transition-colors ${
              selectedChatId === 'ai-assistant' ? 'bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500' : ''
            }`}
            onClick={() => onChatSelect('ai-assistant')}
          >
            <div className="flex items-center">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white">
                ü§ñ
              </div>
              <div className="ml-3">
                <h3 className="font-medium text-gray-900 dark:text-white">AI Assistant</h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {isLoading && selectedChatId === 'ai-assistant' ? '–ü–µ—á–∞—Ç–∞–µ—Ç...' : '–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'}
                </p>
              </div>
            </div>
          </div>

          {/* John Doe */}
          <div 
            className={`p-3 mb-2 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer rounded-lg transition-colors ${
              selectedChatId === 'john-doe' ? 'bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500' : ''
            }`}
            onClick={() => onChatSelect('john-doe')}
          >
            <div className="flex items-center">
              <div className="w-10 h-10 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center text-white">
                üë§
              </div>
              <div className="ml-3">
                <h3 className="font-medium text-gray-900 dark:text-white">John Doe</h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {isLoading && selectedChatId === 'john-doe' ? '–ü–µ—á–∞—Ç–∞–µ—Ç...' : '–í —Å–µ—Ç–∏'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col bg-gray-50 dark:bg-gray-900">
        {selectedChatId ? (
          <>
            {/* Chat Header */}
            <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-900 dark:text-white">
                  {selectedChatId === 'ai-assistant' ? 'ü§ñ AI Assistant' : 'üë§ John Doe'}
                </h2>
                <div className="text-sm text-gray-500 dark:text-gray-400">
                  {selectedChatId === 'ai-assistant' ? '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å' : '–í —Å–µ—Ç–∏'}
                </div>
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages[selectedChatId]?.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${
                    message.sender === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg shadow-sm ${
                      message.sender === 'user'
                        ? 'bg-blue-500 text-white rounded-br-sm'
                        : 'bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-700 rounded-bl-sm'
                    }`}
                  >
                    <p className="whitespace-pre-wrap">{message.text}</p>
                    <p className={`text-xs mt-1 ${
                      message.sender === 'user' 
                        ? 'text-blue-100' 
                        : 'text-gray-500 dark:text-gray-400'
                    }`}>
                      {message.timestamp.toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              ))}
              
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-700 px-4 py-2 rounded-lg rounded-bl-sm shadow-sm">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                      <span className="text-sm text-gray-500 ml-2">
                        {selectedChatId === 'ai-assistant' ? 'AI –¥—É–º–∞–µ—Ç...' : 'John –ø–µ—á–∞—Ç–∞–µ—Ç...'}
                      </span>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 p-4">
              <div className="flex space-x-2">
                <input 
                  type="text" 
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                  className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                  disabled={isLoading || addMessageMutation.isPending}
                />
                <button 
                  onClick={sendMessage}
                  disabled={!inputText.trim() || isLoading || addMessageMutation.isPending}
                  className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                >
                  {isLoading || addMessageMutation.isPending ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      <span>–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                    </>
                  ) : (
                    <>
                      <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
                      <span>üì§</span>
                    </>
                  )}
                </button>
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                üí° –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
              </div>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center">
              <div className="text-8xl mb-6">üí¨</div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-3">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatFront!
              </h2>
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
              </p>
              <div className="text-xs text-gray-500 dark:text-gray-500">
                ü§ñ AI Assistant - –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º<br/>
                üë§ John Doe - –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}